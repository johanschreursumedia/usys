#!/bin/bash

#
#        ___________________        ____....-----....____
#       (________________LL_)   ==============================
#            ______\   \_______.--'.  `---..._____...---'
#            `-------..__            ` ,/
#                        `-._ -  -  - |
#                           `-------'
#
# Triggered during logout to run scripts:
#
# Script Types:
# - onFirstTimeLogin: runs the scripts only the first time by checking if $UMEDIA_LOCAL_DATA
# does not exist
# - onAnyLogin: runs scripts everytime a login happens (in case of a first time login scenario
# the scripts are is still executed after that)
#
# Host type:
# defined as a child of the script type, it tells what is the which kind of host it should
# be executed, this is done by reading the env var $UMEDIA_HOST_TYPE. In case a script
# is meant to be executed in any host then place it under "any" (rather then duplicating it
# accross the hosts...)
#
# Script conventions:
# make sure the scripts have the shebang (#!) and are set as executable. Also, in case of
# scripts that should be only executed in graphical mode, add the extension ".x" to the
# script file name, for instance: "openGimp.x"

# getting current script folder
dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# checking if it's a first time login
loginTypes=""
if ! [ -d "$UMEDIA_LOCAL_DATA" ]; then
  loginTypes="onFirstTimeLogin"

  # making the umedia folder, so next time it's not going to be flagged
  # as first time
  mkdir $UMEDIA_LOCAL_DATA
fi
loginTypes="$loginTypes onAnyLogin"

# running the login scripts
for loginType in $loginTypes ; do

  startupAnyScriptPath="$dir/$loginType/any/$UCORE_OS/$UCORE_OS_VERSION"
  startupHostTypeScriptPath="$dir/$loginType/$UMEDIA_HOST_TYPE/$UCORE_OS/$UCORE_OS_VERSION"
  for startupScriptPath in $startupAnyScriptPath $startupHostTypeScriptPath ; do

    for executable in $startupScriptPath/* ; do

      # making sure it's an executable
      if [[ -x "$executable" ]]; then

        # runs only in graphical mode (X11). This is done by checking the extension of the script
        if [ ${executable: -2} == ".x" ]; then
          # checking if X is available
          if xhost >& /dev/null ; then
            eval $executable
          fi
        # does not care about X availability
        else
          eval $executable
        fi
      fi
    done
  done
done
