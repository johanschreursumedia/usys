#!/bin/bash


# This file contains only enviroment variables that don't contain unresolved values,
# it is mainly used to set variables that contain versions which later on are used
# by the script "expandedVars" to resolve paths.
#
# Base vars can be overridden by user enviroment. Also, it can be overridden in the bash
# session by simply overriding the value of the variable then calling the alias "ucoreExpandVars"
# to resolve the variables that include ucore environment variables in their value.

# checking if dev root is set
if [ -z "$UCORE_ROOT" ]; then
    echo "UCORE_ROOT IS NOT SET"
    exit 1
fi

# versions (looping through the versions types apps, packages... etc)
for versionType in $UCORE_ROOT/settings/versions/$UCORE_APP_VERSION_TYPE/* ; do

  ucoreVersionType="settings/versions/$UCORE_APP_VERSION_TYPE/$versionType"
  if [ -f "$UCORE_ROOT/$ucoreVersionType" ]; then
      while IFS='=' read -r appName appVersion || [[ -n "$appName" ]];
      do
          # translating the format from the versions file followed by:
          # name=version to enrvironment format name UCORE_$NAME_VERSION=$VERSION
          export "UCORE_${appName}_VERSION"=$appVersion
      done < "$UCORE_ROOT/$ucoreVersionType"
  fi

  # executing user overrides
  if ! [ -z "$UCORE_LOCAL" ]; then
      if [ -f "$UCORE_LOCAL/env/ucoreVars" ]; then
          source "$UCORE_LOCAL/env/ucoreVars"
      fi
  fi

  # now user overrides for the active versions
  if [ -f "$UCORE_LOCAL/$ucoreVersionType" ]; then
      while IFS='=' read -r appName appVersion || [[ -n "$appName" ]];
      do
          # translating the format from the versions file followed by:
          # name=version to enrvironment format name UCORE_$NAME_VERSION=$VERSION
          export "UCORE_${appName}_VERSION"=$appVersion
      done < "$UCORE_LOCAL/$ucoreVersionType"
  fi
done

# calling expanded vars
source $UCORE_ROOT/env/expandedVars
